const r="http://localhost:5002/api",a=async o=>{const t=await fetch(`${r}/customers`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!t.ok){const e=await t.json();throw new Error(e.error||"Failed to add customer.")}return t.json()},c=async(o,t)=>{const e=new FormData;e.append("profilePicture",t);const s=await fetch(`${r}/customers/${o}/profile-picture`,{method:"POST",body:e});if(!s.ok)throw new Error("Failed to upload profile picture.");return await s.json()},i=async o=>{try{const t=await fetch(`${r}/customers/${o}`);if(!t.ok)throw new Error("Failed to fetch customer.");return await t.json()}catch(t){return console.error("Error fetching customer:",t),null}},p=async(o,t,e)=>{const s=await fetch(`${r}/customers/CustomerCounts?month=${o}&year=${t}`,{headers:{Authorization:`Bearer ${e}`}});if(!s.ok)throw new Error("Failed to fetch customer counts.");return s.json()},u=async(o,t,e)=>{const s=await fetch(`${r}/customers/WeeklyCustomerCounts?week=${o}&year=${t}`,{headers:{Authorization:`Bearer ${e}`}});if(!s.ok)throw new Error("Failed to fetch weekly customer counts.");return s.json()},h=async()=>{try{const o=await fetch(`${r}/customers`);if(!o.ok)throw new Error("Failed to fetch customers.");return await o.json()}catch(o){return console.error("Error fetching customers:",o),[]}},m=async()=>{try{const o=await fetch(`${r}/appointments/upcoming`);if(!o.ok)throw new Error("Failed to fetch upcoming appointments.");return await o.json()}catch(o){return console.error("Error fetching upcoming appointments:",o),[]}},w=async(o=1,t=100)=>{try{const e=await fetch(`${r}/appointments/past?page=${o}&limit=${t}`);if(!e.ok)throw new Error("Failed to fetch past appointments.");return await e.json()}catch(e){return console.error("Error fetching past appointments:",e),{appointments:[]}}},d=async(o,t)=>{try{const e=await fetch(`${r}/appointments/${o}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){const n=await e.json();throw console.error("❌ Error Response from API:",n),new Error(n.message||"Failed to update the appointment.")}const s=await e.json();return console.log("✅ API Response - Updated Appointment:",s),s}catch(e){throw console.error("❌ Error updating appointment:",e.message),e}};async function f(){const o=await fetch(`${r}/waitingList`);if(!o.ok){const t=await o.json();throw new Error(t.error||"Failed to fetch the waiting list.")}return o.json()}async function l(o){const t=await fetch(`${r}/waitingList`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({customerId:o})});if(!t.ok){const e=await t.json();throw new Error(e.error||"Failed to add to waiting list.")}return t.json()}const y=async(o={})=>{const t=new URLSearchParams(o).toString(),e=t?`${r}/auto-customers?${t}`:`${r}/auto-customers`,s=await fetch(e);if(!s.ok)throw new Error("Failed to fetch recurring customers.");const n=await s.json();return(n==null?void 0:n.data)??[]},g=async o=>{var e;const t=await fetch(`${r}/auto-customers`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!t.ok){const s=await t.json().catch(()=>({}));throw new Error(((e=s.errors)==null?void 0:e.join(" "))||s.message||"Failed to create recurring customer.")}return t.json()},j=async(o,t)=>{var s;const e=await fetch(`${r}/auto-customers/${o}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){const n=await e.json().catch(()=>({}));throw new Error(((s=n.errors)==null?void 0:s.join(" "))||n.message||"Failed to update recurring customer.")}return e.json()},$=async o=>{const t=await fetch(`${r}/auto-customers/${o}`,{method:"DELETE"});if(!t.ok){const e=await t.json().catch(()=>({}));throw new Error(e.message||"Failed to delete recurring customer.")}return t.json()},E=async o=>{const t=await fetch(`${r}/auto-customers/push`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!t.ok){const e=await t.json().catch(()=>({}));throw new Error(e.message||"Failed to push recurring customers to calendar.")}return t.json()},C=async(o,t)=>{const e=await fetch(`${r}/auto-customers/${o}/occurrences/override`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){const s=await e.json().catch(()=>({}));throw new Error(s.message||"Failed to override occurrence.")}return e.json()};async function k(o){const t=await fetch(`${r}/waitingList/${o}`,{method:"DELETE"});if(!t.ok){const e=await t.json();throw new Error(e.error||"Failed to remove from waiting list.")}return t.json()}async function F(o,t){console.log("Updating note for ID:",o,"Note:",t);const e=await fetch(`${r}/waitingList/${o}/note`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){const s=await e.json();throw console.error("Failed to update note:",s),new Error(s.error||"Failed to update note")}return e.json()}async function T(){const o=await fetch(`${r}/sms-statuses`);if(!o.ok)throw new Error("Failed to fetch SMS statuses");return o.json()}const S=async o=>{const t=await fetch(`${r}/auth/signin`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!t.ok)throw new Error("Failed to login.");return t.json()},A=async o=>{const t=await fetch(`${r}/appointments`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!t.ok)throw new Error("Failed to create appointment.");return t.json()},O=async o=>{const t=await fetch(`${r}/appointments/${o}`,{method:"DELETE",headers:{"Content-Type":"application/json"}});if(!t.ok){const e=await t.json().catch(()=>({}));throw new Error(e.message||"Failed to delete appointment.")}return t.json()},P=async o=>{try{const t=await fetch(`${r}/customers/${o}/all-appointments`);if(!t.ok)throw new Error("Failed to fetch all appointment history.");return await t.json()}catch(t){return console.error("Error fetching all appointment history:",t),[]}},b=async(o,t)=>{const e=await fetch(`${r}/customers/${o}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw new Error("Failed to update customer");return e.json()};export{f as a,l as b,m as c,d,A as e,h as f,T as g,w as h,i,P as j,c as k,a as l,p as m,u as n,S as o,b as p,y as q,k as r,$ as s,C as t,F as u,j as v,g as w,E as x,O as y};
